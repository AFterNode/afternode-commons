plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'java-library'
}

group = 'cn.afternode.commons'
version = '2.0.0'

allprojects {
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "java"
    apply plugin: "signing"
    apply plugin: "java-library"

    group = parent.group
    version = parent.version

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            mavenJava (MavenPublication) {
                group project.group
                artifactId project.name
                version project.version
                from components.java

                pom {
                    name = "AFterNode Commons"
                    description = "Utilities for Minecraft bukkit plugin (and more) developing"
                    url = "https://github.com/AFterNode/afternode-commons"

                    licenses {
                        license {
                            name = "MIT License"
                            url = "https://github.com/AFterNode/afternode-commons/blob/main/LICENSE"
                        }
                    }

                    developers {
                        developer {
                            id = "h3xadecimal"
                            name = "H3xadecimal"
                            email = "h3xadecimal@afternode.cn"
                        }
                    }

                    scm {
                        url = "https://github.com/AFterNode/afternode-commons"
                    }
                }
            }
        }

        repositories {
            maven {
                name = "OSSRH"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = project.hasProperty("ossrhUsername") ? project.ossrhUsername : "NONE"
                    password = project.hasProperty("ossrhPassword") ? project.ossrhPassword : "NONE"
                }
            }
        }
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        sign publishing.publications.mavenJava
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}
